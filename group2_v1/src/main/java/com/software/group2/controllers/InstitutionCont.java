/**
 * 
 */
package com.software.group2.controllers;

import java.math.BigInteger;
import java.util.Optional;

/**
 * @author Austin
 *
 */
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.software.group2.entities.Institution;
import com.software.group2.repos.InstitutionRepo;



@Controller    // This means that this class is a Controller
@RequestMapping(path="/inst") // This means URL's start with /software (after Application path)
public class InstitutionCont {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private InstitutionRepo instRepository;

	@PostMapping(path="/add", consumes= {"application/json"} ) // Map ONLY POST Requests
	public @ResponseBody String addNewInst (@RequestBody Institution n) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		instRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/getall")
	public @ResponseBody Iterable<Institution> getAllInst() {
		// This returns a JSON or XML with the users
		return instRepository.findAll();
	}
	
	@GetMapping(path="getunapproved")
	public @ResponseBody Iterable<Institution> getAllInstUnapproved() {
		// This returns a JSON or XML with the users
		return instRepository.findAllUnapproved();
	}
	
	
	@GetMapping(path="/getone")
	public @ResponseBody Optional<Institution> getOneInst(@RequestParam Integer id) {
		// This returns a JSON or XML with the admin
		return instRepository.findById(id);
	}
	
	@GetMapping(path="/checkone/user")
	public @ResponseBody boolean checkOneStudentUser(@RequestParam String institutionUserName) {
		// This returns a JSON or XML with the admin
		 BigInteger ret = instRepository.checkByInstitutionUserName(institutionUserName);
		 int result = ret.intValue();
		 System.out.println(result);
		 if(result == 1) {
			 return true;
		 }
		 return false;
		 
	}
	
	@GetMapping(path="/getone/user")
	public @ResponseBody Optional<Institution> getOneInstitutionUser(@RequestParam String institutionUserName) {
		// This returns a JSON or XML with the admin
		 return instRepository.findByInstitutionUserName(institutionUserName);

		 
	}
	
	@GetMapping(path="/update/desc")
	public @ResponseBody int updateInstitutionDesc(@RequestParam int institutionID, String newVal ) {
		// This returns a JSON or XML with the admin
		 return instRepository.updateInstitutionDesc(institutionID, newVal);

	}
	
	@GetMapping(path="/update/email")
	public @ResponseBody int updateInstitutionEmail(@RequestParam int institutionID, String newVal ) {
		// This returns a JSON or XML with the admin
		 return instRepository.updateInstitutionEmail(institutionID, newVal);

	}
	
}

